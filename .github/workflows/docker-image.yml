name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: latest

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      working-directory: ./my-set-service/my-lambda-project
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      working-directory: ./my-set-service/my-lambda-project/tests
      run: |
        python test_unittest.py

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure AWS credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION

    - name: Login to Amazon ECR
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
    
    - name: Build Docker image
      working-directory: ./my-set-service/my-lambda-project
      run: |
        docker buildx build --platform linux/arm64 -t my-lambda-function . --load

    - name: Tag Docker image
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        docker tag my-lambda-function:latest $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

    - name: Push Docker image to ECR
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        docker push $ECR_REPOSITORY:${{ env.IMAGE_TAG }}

    - name: Update Lambda function code
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      run: |
        aws lambda update-function-code --function-name intuit-set-LambdaFunction-Ud5PmJvB8cEt --image-uri $ECR_REPOSITORY:${{ env.IMAGE_TAG }} --region $AWS_REGION

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      working-directory: ./my-set-service/my-lambda-project
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      working-directory: ./my-set-service/my-lambda-project/tests
      run: |
        python test_api_integration.py
